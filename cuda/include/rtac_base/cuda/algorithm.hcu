#ifndef _DEF_RTAC_BASE_CUDA_ALGORITHM_HCU_
#define _DEF_RTAC_BASE_CUDA_ALGORITHM_HCU_

#include <vector>

#include <thrust/device_ptr.h>
#include <thrust/sort.h>
#include <thrust/execution_policy.h>

#include <rtac_base/cuda_defines.h>
#include <rtac_base/containers/VectorView.h>
#include <rtac_base/cuda/DeviceVector.h>
#include <rtac_base/cuda/PinnedVector.h>

namespace rtac { namespace cuda {

template <typename T>
struct LessThan {
    RTAC_HOSTDEVICE bool operator()(const T& lhs, const T& rhs) const {
        return lhs < rhs;
    }
};

/**
 * This function sorts by ascending order on the GPU.
 *
 * VectorT muist be a GPU accessible array.
 */
template <typename T,
          template<typename>class VectorT,
          template<typename>class ComparatorT = thrust::less>
void sort(VectorT<T>& data, ComparatorT<T> comp = ComparatorT<T>{})
{
    thrust::sort(thrust::device,
                 thrust::device_pointer_cast(data.begin()),
                 thrust::device_pointer_cast(data.end()),
                 comp);
}

/**
 * This class performs a binning operation using a user-defined criterion.
 *
 * Input data is a vector of arbitrary elements. The binning works by
 * generating a  key value for each data element. This key is actually the bin
 * index.  The input data is then sorted so elements of each bins are packed
 * together in the input array. The bins are then sent back to the user as a
 * list of VectorViews, each VectorView pointing to the first element of each
 * bin in the global array.
 *
 * The criterion is a function of data type T and must return the corresponding
 * bin index. If the returned bin index is negative, the datum is discarded in
 * the bin output.
 */
class Binning
{
    protected:
    
    // these are temp data.
    mutable PinnedVector<int> keys_;

    public:

    Binning() {}

    template <typename T, class Criterion,
              unsigned int BlockSize = 1024>
    void compute_keys(const DeviceVector<T>& data, PinnedVector<int>& keys, 
                      const Criterion& criterion) const;
    
    template <typename T, class Criterion,
              unsigned int BlockSize = 1024>
    void operator()(DeviceVector<T>& data,
                    std::size_t binCount,
                    const Criterion& criterion,
                    DeviceVector<rtac::VectorView<T>>& bins,
                    int binOverlap = 0) const;

    template <typename T, class Criterion,
              unsigned int BlockSize = 1024>
    void operator()(DeviceVector<T>& data,
                    std::size_t binCount,
                    const Criterion& criterion,
                    PinnedVector<rtac::VectorView<T>>& bins,
                    int binOverlap = 0) const;
};

/**
 * Useful helper function for binning.
 *
 * Recreate temp data at each call. For better performances, use the Binning
 * object and reuse it instead.
 */ 
template <typename T, class Criterion, unsigned int BlockSize = 1024>
inline DeviceVector<rtac::VectorView<T>> binning(DeviceVector<T>& data,
                                                  std::size_t binCount,
                                                  Criterion criterion,
                                                  int binOverlap = 0)
{
    DeviceVector<rtac::VectorView<T>> bins;
    Binning().operator()(data, binCount, criterion, bins, binOverlap);
    return bins;
}

namespace details {

template <typename T, class Criterion>
__global__ void compute_keys(rtac::VectorView<const T> data,
                             rtac::VectorView<int> keys,
                             Criterion keyGenerator)
{
    auto tid = blockDim.x*blockIdx.x + threadIdx.x;
    if(tid < data.size()) {
        keys[tid] = keyGenerator(data[tid]);
    }
}

};

template <typename T, class Criterion, unsigned int BlockSize>
void Binning::compute_keys(const DeviceVector<T>& data, 
                           PinnedVector<int>& keys,
                           const Criterion& criterion) const
{
    keys.resize(data.size());
    details::compute_keys<<<(data.size() / BlockSize ) + 1, BlockSize>>>(
        data.view(), keys.view(), criterion);
    cudaDeviceSynchronize();
}

template <typename T, class Criterion, unsigned int BlockSize>
void Binning::operator()(DeviceVector<T>& data,
                         std::size_t binCount,
                         const Criterion& criterion,
                         DeviceVector<rtac::VectorView<T>>& bins,
                         int binOverlap) const
{
    // Generating key for each data element and sorting data according to this
    // key.
    Binning::compute_keys(data, keys_, criterion);
    thrust::sort_by_key(thrust::device,
                        thrust::device_pointer_cast(keys_.begin()),
                        thrust::device_pointer_cast(keys_.end()),
                        thrust::device_pointer_cast(data.begin()));
    
    // Generating the bins.
    std::vector<rtac::VectorView<T>> tmpBins(binCount);
    int currentBin = -1;
    int currentBinStart = 0;
    int i = 0;
    for(; i < data.size() && keys_[i] < binCount; i++) {
        if(keys_[i] < 0) continue;
        if(keys_[i] != currentBin) {
            if(currentBin >= 0) {
                tmpBins[currentBin] = rtac::VectorView{i - currentBinStart,
                                                        data.data() + currentBinStart};
            }
            currentBin      = keys_[i];
            currentBinStart = i;
        }
    }
    if(currentBin >= 0) {
        tmpBins[currentBin] = rtac::VectorView{i - currentBinStart,
                                                data.data() + currentBinStart};
    }
    if(binOverlap > 0) {
        std::vector<rtac::VectorView<T>> overlapped(binCount);
        for(int i = 0; i < tmpBins.size(); i++) {
            auto jstart = std::max(0, i - binOverlap);
            auto jend   = std::min(tmpBins.size() - 1, (std::size_t)(i + binOverlap));
            auto p = tmpBins[jstart].data();
            std::size_t size = 0;
            for(auto j = jstart; j <= jend; j++) {
                size += tmpBins[j].size();
                if(!p) p = tmpBins[j].data();
            }
            overlapped[i] = rtac::VectorView<T>(size, p);
        }
        bins = overlapped;
    }
    else {
        bins = tmpBins;
    }
}

template <typename T, class Criterion, unsigned int BlockSize>
void Binning::operator()(DeviceVector<T>& data,
                         std::size_t binCount,
                         const Criterion& criterion,
                         PinnedVector<rtac::VectorView<T>>& bins,
                         int binOverlap) const
{
    // Generating key for each data element and sorting data according to this
    // key.
    Binning::compute_keys(data, keys_, criterion);
    thrust::sort_by_key(thrust::device,
                        thrust::device_pointer_cast(keys_.begin()),
                        thrust::device_pointer_cast(keys_.end()),
                        thrust::device_pointer_cast(data.begin()));
    
    // Generating the bins.
    bins.resize(binCount);
    int currentBin = -1;
    int currentBinStart = 0;
    int i = 0;
    for(; i < data.size() && keys_[i] < binCount; i++) {
        if(keys_[i] < 0) continue;
        if(keys_[i] != currentBin) {
            if(currentBin >= 0) {
                bins[currentBin] = rtac::VectorView{i - currentBinStart,
                                                     data.data() + currentBinStart};
            }
            currentBin      = keys_[i];
            currentBinStart = i;
        }
    }
    if(currentBin >= 0) {
        bins[currentBin] = rtac::VectorView{i - currentBinStart,
                                             data.data() + currentBinStart};
    }
}

}; //namespace cuda
}; //namespace rtac


#endif //_DEF_RTAC_BASE_CUDA_ALGORITHM_H_
