#ifndef _DEF_RTAC_BASE_CUDA_ALGORITHM_HCU_
#define _DEF_RTAC_BASE_CUDA_ALGORITHM_HCU_

#include <thrust/sort.h>
#include <thrust/execution_policy.h>

#include <rtac_base/cuda_defines.h>

namespace rtac { namespace cuda {

template <typename T>
struct LessThan {
    RTAC_HOSTDEVICE bool operator()(const T& lhs, const T& rhs) const {
        return lhs < rhs;
    }
};

template <typename T,
          template<typename>class VectorT,
          template<typename>class ComparatorT = thrust::less>
void sort(VectorT<T>& data, ComparatorT<T> comp = ComparatorT<T>{})
{
    thrust::sort(thrust::device,
                 data.begin_thrust(),
                 data.end_thrust(),
                 comp);
}

}; //namespace cuda
}; //namespace rtac


#endif //_DEF_RTAC_BASE_CUDA_ALGORITHM_H_
