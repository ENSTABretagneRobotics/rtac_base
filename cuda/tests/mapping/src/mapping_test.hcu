#ifndef _DEF_RTAC_BASE_CUDA_TESTS_MAPPING_TEST_HCU_
#define _DEF_RTAC_BASE_CUDA_TESTS_MAPPING_TEST_HCU_

#include <rtac_base/cuda/utils.h>

template <typename T>
__global__ void do_render_texture(T* output, int W, int H, cudaTextureObject_t texData)
{
    for(int h = 0; h < H; h++) {
        float y = ((float)h) / (H - 1);
        for(int w = 0; w < W; w++) {
            float x = ((float)w) / (W - 1);
            output[W*h + w] = tex2D<T>(texData, x, y);
        }
    }
}

template <typename T, class MappingT>
__global__ void do_render_mapping1(T* output, int W, int H, MappingT map)
{
    float2 p;
    for(int h = 0; h < H; h++) {
        p.y = ((float)h) / (H - 1);
        for(int w = 0; w < W; w++) {
            p.x = 1.0f - ((float)w) / (W - 1);
            output[W*h + w] = map(p);
        }
    }
}

template <typename T, class MappingT>
__global__ void do_render_mapping2(T* output, int W, int H, MappingT map)
{
    uint2 p;
    for(int h = 0; h < H; h++) {
        p.y = h;
        for(int w = 0; w < W; w++) {
            p.x = w;
            output[W*h + w] = map(p);
        }
    }
}

template <typename T, class MappingT1, class MappingT2>
__global__ void do_render_mapping3(T* output, int W, int H,
                                   MappingT1 map1, MappingT2 map2)
{
    float2 p;
    for(int h = 0; h < H; h++) {
        p.y = map2(((float)h) / (H - 1));
        for(int w = 0; w < W; w++) {
            p.x = map2(1.0f - ((float)w) / (W - 1));
            output[W*h + w] = map1(p);
        }
    }
}


#endif //_DEF_RTAC_BASE_CUDA_TESTS_MAPPING_TEST_HCU_
